@inject ViewModels.RecurrenceDataEntryViewModel Model

<label for="appointment-name">Appointment Name</label>
<input class="form-control appointment-name" type="text" name="Name" @bind="Model.Schedule.Name" placeholder="Name of the Recurring Appointment" />

<label for="StartDate" class="col-sm-4">Start Date:</label>
<input class="form-control col-sm-8" type="date" id="StartDate" @bind-value="Model.Schedule.MinStartDateTime" @bind-value:format="yyyy-MM-dd" />
<label for="EndDate" class="col-sm-4">End Date:</label>
<input class="form-control col-sm-8" type="date" id="EndDate" @bind-value="Model.Schedule.MaxEndDateTime" @bind-value:format="yyyy-MM-dd" />

<label for="StartTime" class="col-sm-4">Start Time:</label>
<input class="form-control col-sm-8" type="time" id="StartTime" @bind-value="Model.TimeOfDay"  @bind-value:event="TimeChanged"/>

<label for="EndTime" class="col-sm-4">Ending Time:</label>
<input class="form-control col-sm-8" type="time" id="EndTime" @bind-value="EndTime" @bind-value:event="TimeChanged" />

<fieldset>
	<legend>Recurrence</legend>
	<div class="schedule-form-group">
		<label for="select-recurrence-frequency" class="full-row-label">Choose Appointment Frequency</label>
		<select name="pattern" class="form-control" @bind="Model.Pattern" id="select-recurrence-frequency">
			<option value="D">Daily</option>
			<option value="W">Weekly</option>
			@*			<option>Fortnightly</option>*@
			@*<option value="M">Monthly</option>*@
		</select>

		@if (Model.Pattern == "W")
		{
			// TODO: Simon G - Do we really need the onchange='() => Model.OnDOWChange("xx")' syntax ? Would this not work as onchange='Model.OnDOWChange("xx")'?
			<div class="form-check">
				<input id="checkbox-dow-sunday" type="checkbox" class="form-check-input" name="dow" value="0" @onchange='() => Model.OnDOWChange("0")' /><label class="form-check-label" for="checkbox-dow-sunday">Sunday</label>
			</div>
			<div class="form-check">
				<input id="checkbox-dow-monday" type="checkbox" class="form-check-input" name="dow" value="1" @onchange='() => Model.OnDOWChange("1")' /><label class="form-check-label" for="checkbox-dow-monday">Monday</label>
			</div>
			<div class="form-check">
				<input id="checkbox-dow-tuesday" type="checkbox" class="form-check-input" name="dow" value="2" @onchange='() => Model.OnDOWChange("2")' /><label class="form-check-label" for="checkbox-dow-tuesday">Tuesday</label>
			</div>
			<div class="form-check">
				<input id="checkbox-dow-wednesday" type="checkbox" class="form-check-input" name="dow" value="3" @onchange='() => Model.OnDOWChange("3")' /><label class="form-check-label" for="checkbox-dow-wednesday">Wednesday</label>
			</div>
			<div class="form-check">
				<input id="checkbox-dow-thursday" type="checkbox" class="form-check-input" name="dow" value="4" @onchange='() => Model.OnDOWChange("4")' /><label class="form-check-label" for="checkbox-dow-thursday">Thursday</label>
			</div>
			<div class="form-check">
				<input id="checkbox-dow-friday" type="checkbox" class="form-check-input" name="dow" value="5" @onchange='() => Model.OnDOWChange("5")' /><label class="form-check-label" for="checkbox-dow-friday">Friday</label>
			</div>
			<div class="form-check">
				<input id="checkbox-dow-saturday" type="checkbox" class="form-check-input" name="dow" value="6" @onchange='() => Model.OnDOWChange("6")' /><label class="form-check-label" for="checkbox-dow-saturday">Saturday</label>
			</div>
	}
	</div>
</fieldset>

<button class="schedule-item-button ml-0 btn btn-primary" @onclick="Model.Save">Add New Recurring Schedule</button>

@code {

	// Cheer 1000 cpayette 27/06/19
	// Cheer 500 cpayette 8/08/19

	[Parameter]
	public RecurringSchedule Schedule
	{
		get { return Model.Schedule; }
		set { Model.Schedule = value; }
	}

	[Parameter]
	public EventCallback OnSave
	{
		get { return Model.OnSave; }
		set { Model.OnSave = value; }
	}

	TimeSpan EndTime { get; set; }

	async Task TimeChanged(UIChangeEventArgs args) {

		if (EndTime != null) return;

		if (Model.TimeOfDay > EndTime) {
			EndTime = EndTime.Add(TimeSpan.FromDays(1));
		}
		Model.Schedule.Duration = EndTime.Subtract(Model.TimeOfDay);

	}


}
