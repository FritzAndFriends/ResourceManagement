@inject ViewModels.DayViewViewModel Model

<div class="dayview" style="grid-template-columns: 4.3em repeat(@Model.DayCount,1fr); grid-template-rows: repeat(@Model.HoursPerDay, 1.5em);">
	@{

		if (Model.DayDisplay)
		{
			<span class="grid" style="grid-column: 1;"></span>
			for (int columnCounter = 2; columnCounter < 2 + Model.DayCount; columnCounter++)
			{
				<span class="grid" style="grid-column: @columnCounter; text-align: center;">
					@Model.MyScheduleState.DisplayBeginDate.AddDays(columnCounter - 2).ToString("ddd MMM d")
				</span>
			}
		}

		var currentTime = Model.DayViewStart;

		for (var i = 0; i < Model.HoursPerDay; i++)
		{
			<span class="grid" style="grid-column: 1;">
				<text>@currentTime.ToString("h:mm tt")</text>
				@{ currentTime = currentTime.AddHours(1); }
			</span>

			for (int columnCounter = 2; columnCounter < 2 + Model.DayCount; columnCounter++)
			{
				<span class="grid" style="grid-column: @columnCounter"></span>
			}
		}
	}

	@if (Model.MyScheduleState != null)
	{
		foreach (var item in Model.MyScheduleState.TimeSlots.Where(s => s.StartDateTime.Date == Model.SelectedDate.Date))
		{
			if (Model.DisplayItem(item.StartDateTime, item.EndDateTime))
			{
				<span class="scheduleItem @Model.ItemBorderStyle(item.StartDateTime, item.EndDateTime)" style="grid-row-start: @Model.ItemStartRow(item.StartDateTime); top: @Model.ItemTopPosition(item.StartDateTime); height: @Model.ItemRowHeight(item.StartDateTime, item.EndDateTime);">
					@item.Name  - @item.StartDateTime.ToShortTimeString()
				</span>
			}
		}
	}

</div>

@code {

	// TODO: Simon G - Work out if it is possible to make the Model a property with a Parameter attribute and pass the whole thing in from the parent rather than using DI, there may be a timing DI vs Paramater state being set, which might be offset by component composition.

	// Cheer 701 themichaeljolley 09/07/19
	// Cheer 600 cpayette 09/07/19
	// Cheer 1500 clintonrocksmith 09/07/19

	[Parameter]
	Data.ScheduleState MyScheduleState => Model.MyScheduleState;

	[Parameter]
	DateTime DayViewStart => Model.DayViewStart;

	[Parameter]
	DateTime DayViewEnd => Model.DayViewEnd;

	// Cheer 110 copperbeardy 14/07/19

	[Parameter]
	int DayCount => Model.DayCount;

	[Parameter]
	bool DayDisplay => Model.DayDisplay;

	protected override void OnInit()
	{
		if (Model.MyScheduleState != null)
		{
			Model.MyScheduleState.OnSelectedDateChanged += (o, args) => { Invoke(StateHasChanged); };
		}
		base.OnInit();
	}

	protected override void OnParametersSet()
	{
		this.StateHasChanged();
		base.OnParametersSet();
	}
}