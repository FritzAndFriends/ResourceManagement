@page "/availability"
@attribute [Authorize]
@inject ViewModels.AvailabilityViewModel Model

	<div class="row">
		<div id="Availability" class="col-md-8" style="vertical-align: top; ">

			<h3>Set the availability for </h3>

			<div>

				<EditForm Model="Model">

					<div style="display: inline-block" class="form-group">
						<h4>Scheduled Appointments</h4>

						<input class="form-control" type="text" name="Name" @bind="Model.NewScheduleItem.Name" placeholder="Name of the Appointment" />
						<DateTimeInput Value="Model.NewScheduleItem.StartDateTime"></DateTimeInput>
						<DateTimeInput Value="Model.NewScheduleItem.EndDateTime"></DateTimeInput>
						<button class="btn btn-primary" @onclick="() => Model.AddNewScheduleItem()">Add New Schedule Item</button>

					</div>

					<div style="display: inline-block" class="form-group">
						<h4>Create a Recurring Schedule</h4>

						<RecurrenceDataEntry Schedule="Model.NewRecurringSchedule" OnSave="Model.AddNewRecurringSchedule" />

					</div>

				</EditForm>

			</div>

		</div>

		<div id="MySchedule" class="col-md-4">
			<h3>My Schedule</h3>

			<DayPicker />

			<DayView DayViewStart="Model.DayViewStart" DayViewEnd="Model.DayViewEnd" MyScheduleState="Model.MyScheduleState"/>

		</div>

	</div>

@code {

	[CascadingParameter] Task<AuthenticationState> Context { get; set; }

	// Cheer 500 electrichavoc 07/06/19
	protected override async Task OnInitAsync() {
		var state = await Context; 
		await Model.OnInitAsync(state.User);
	}
}
