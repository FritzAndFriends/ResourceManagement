@page "/availability"
@attribute [Authorize]
@using VM = ViewModels.AvailabilityViewModel
@inject VM Model


<div id="availabilityDataEntry">

	<div id="availabilityHead">
		<h3>Set the availability for @Model._User.Identity.Name</h3>
	</div>

	<div class="availabilityTabBar">

		<div class="btn-group-vertical" role="group" aria-label="Choose Single or Recurring Event To Add To Your Schedule">

			<button type="button" class="btn @(Model.SelectedTab == VM.Tabs.Single ? "btn-primary" : "btn-outline-primary")" @onclick="(() => Model.ClickTab(VM.Tabs.Single))">
	Single Event</button>

			<button type="button" class="btn @(Model.SelectedTab == VM.Tabs.Recurring ? "btn-primary" : "btn-outline-primary")" @onclick="(() => Model.ClickTab(VM.Tabs.Recurring))">Recurring Events</button>

		</div>

	</div>

	<div class="availabilityCenter">

		<EditForm Model="Model">

			<div id="ScheduleItem" class="schedule-form-group form-group" style="@(Model.SelectedTab != VM.Tabs.Single ? "display: none;" :"")">

				<h4 class="head">Schedule One Time Appointments</h4>
				<label for="appointment-name" class="appointment-name-label">Appointment Name: </label>
				<input class="form-control appointment-name" type="text" name="Name" id="scheduled-appointment-name" @bind="Model.NewScheduleItem.Name" placeholder="Name of the Appointment" />
				<label class="label1" for="scheduled-appointment-start-time">Start Time:</label>
				<DateTimeInput class="form-control startTime" Value="Model.NewScheduleItem.StartDateTime" id="scheduled-appointment-start-time"></DateTimeInput>

				<label class="label2" for="scheduled-appointment-end-time">End Time:</label>
				<DateTimeInput class="form-control endTime" Value="Model.NewScheduleItem.EndDateTime" id="scheduled-appointment-end-time"></DateTimeInput>

				<div class="foot">
					<button class="schedule-item-button btn btn-primary" @onclick="() => Model.AddNewScheduleItem()">Add New Schedule Item</button>
				</div>

			</div>

			<div id="RecurringSchedule" class="schedule-form-group form-group" style="@(Model.SelectedTab != VM.Tabs.Recurring ? "display: none;" :"")">
				<h4 class="head">Create a Recurring Schedule</h4>

				<RecurrenceDataEntry Schedule="Model.NewRecurringSchedule" OnSave="Model.AddNewRecurringSchedule" />

			</div>

		</EditForm>

	</div>

	<div id="MySchedule">
		<h3>My Schedule</h3>

		<DayPicker />

		<DayView DayViewStart="Model.DayViewStart" DayViewEnd="Model.DayViewEnd" MyScheduleState="Model.MyScheduleState" />

	</div>

	<div id="ScheduleList">

		<!-- OUTPUT THE SCHEDULE LIST FOR THIS USER IN A GRID HERE -->

	</div>

</div>

@code {

	[CascadingParameter] Task<AuthenticationState> Context { get; set; }

	// Cheer 500 electrichavoc 07/06/19
	protected override async Task OnInitAsync()
	{
		var state = await Context;
		await Model.OnInitAsync(state.User);
		StateHasChanged();
	}
}
