@using Fritz.ResourceManagement.Domain
@using Microsoft.EntityFrameworkCore
@inject System.Security.Claims.ClaimsPrincipal CurrentUser
@inject Models.MyDbContext DbContext

<h3>Set the availability for @CurrentUser.Identity.Name</h3>

<div class="row">

	<div class="col-md-4">
		<h4>Scheduled Appointments</h4>

		<ul>
			@foreach (var scheduleItem in MySchedule?.ScheduleItems)
			{
				<li>@scheduleItem.Name :: @scheduleItem.StartDateTime - @scheduleItem.EndDateTime</li>
			}
		</ul>

		<p>
			<input type="text" name="Name" bind="@NewScheduleItem.Name" placeholder="Name of the Appointment" />
			<input type="datetime-local" name="StartTime" value="@NewScheduleItem.StartDateTime.ToString("s")" placeholder="Start Date and Time" />
			<input type="datetime-local" name="EndTime" value="@NewScheduleItem.EndDateTime.ToString("s")" placeholder="End Date and Time" />
		</p>
		<button onclick="@(() => AddNewScheduleItem())">Add New Schedule Item</button>

	</div>

</div>


@functions {

	// Cheer 500 electrichavoc 07/06/19

	Schedule MySchedule = null;
	ScheduleItem NewScheduleItem;

	protected override void OnInit()
	{
		ResetScheduleItem();
		MySchedule = GetMyAvailability();
	}


	Schedule GetMyAvailability()
	{

		var personId = CurrentUser.GetPersonId();

		var thisPerson = DbContext
			.Persons
			.Include(p => p.Schedule)
			.First(p => p.Id == personId);

		return thisPerson.Schedule;

	}

	void AddNewScheduleItem()
	{

		// Cheer 200 ultramark 07/06/19
		// Cheer 100 TheMichaelJolley 07/06/19

		NewScheduleItem.Status = ScheduleStatus.NotAvailable;
		NewScheduleItem.ScheduleId = MySchedule.Id;

		DbContext.Schedules.Update(MySchedule);
		MySchedule.ScheduleItems.Add(NewScheduleItem);
		DbContext.SaveChanges();

		ResetScheduleItem();

	}

	void ResetScheduleItem()
	{

		NewScheduleItem = new ScheduleItem();
		NewScheduleItem.StartDateTime = DateTime.Today;
		NewScheduleItem.EndDateTime = DateTime.Today.AddDays(1);


	}

}
