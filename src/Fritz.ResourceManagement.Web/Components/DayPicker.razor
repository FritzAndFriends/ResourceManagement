@using Fritz.ResourceManagement.Domain
@inject Data.ScheduleState MyScheduleState
<div class="monthpicker">

	<button id="prevMonth" onclick="@PrevMonth">&lt;</button>
	<div id="name">@SelectedDate.ToString("MMMM yyyy")</div>
	<button id="nextMonth" onclick="@NextMonth">&gt;</button>

	<span class="dow">Su</span>
	<span class="dow">M</span>
	<span class="dow">Tu</span>
	<span class="dow">W</span>
	<span class="dow">Th</span>
	<span class="dow">F</span>
	<span class="dow">Sa</span>

	@for (var i = 0; i < FirstDayOfMonthDoW; i++)
	{
		<span></span>
	}

	@for (var i = 1; i <= LastDayOfMonth; i++)
	{

		var thisDay = new DateTime(SelectedDate.Year, SelectedDate.Month, i);
		var today = (thisDay.Date == DateTime.Today.Date) ?
			"today" : null;
		var todayTitle = (string.IsNullOrEmpty(today)) ? null : "Today!";
		var hasAppt = MyScheduleState.TimeSlots.Any(i => i.StartDateTime.Date == thisDay.Date) ?
			"appt" : null;

		<span class="@today @hasAppt day" title="@todayTitle" onclick="@(() => MyScheduleState.SelectDate(thisDay))">@i</span>
	}

</div>
<button id="gotoToday" onclick="@GotoToday">Today</button>

<span>Selected Date is: @SelectedDate</span>

@functions {

	DateTime SelectedDate {
		get { return MyScheduleState.SelectedDate; }
		set { MyScheduleState.SelectDate(value); }
	}

	Schedule MySchedule {
		get { return MyScheduleState.Schedule; }
	}

	int FirstDayOfMonthDoW
	{
		get
		{

			var first = new DateTime(SelectedDate.Year, SelectedDate.Month, 1);
			return (int)first.DayOfWeek;

		}
	}

	int LastDayOfMonth
	{
		get
		{
			return new DateTime(SelectedDate.Year, SelectedDate.Month, 1).AddMonths(1).AddDays(-1).Day;
		}
	}

	void PrevMonth()
	{
		SelectedDate = SelectedDate.AddMonths(-1);
		SelectedDate = new DateTime(SelectedDate.Year, SelectedDate.Month, 1);
	}

	void NextMonth()
	{
		SelectedDate = SelectedDate.AddMonths(1);
		SelectedDate = new DateTime(SelectedDate.Year, SelectedDate.Month, 1);
	}

	void GotoToday()
	{
		SelectedDate = DateTime.Today;
	}

}