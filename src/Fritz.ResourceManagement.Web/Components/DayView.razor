@using Fritz.ResourceManagement.Domain
@inject Data.ScheduleState MyScheduleState
@inject Data.ExpandedSchedule ExpandedSchedule
	<div class="dayview">
		@{
			var currentTime = DayViewStart;
		}
		@for (var i = 0; i < 24; i++)
		{
			if (i % 2 == 0)
			{
				<span class="grid" style="grid-column: 1;">
					<text>@currentTime.ToString("h:mm tt")</text>
				</span>
				currentTime = currentTime.AddHours(1);
			}
			else
			{
				<span class="grid" style="grid-column: 2;"></span>
			}
		}

		@foreach (var item in ExpandedSchedule.TimeSlots.Where(s => s.StartDateTime.Date == SelectedDate.Date))
		{
			if (DisplayScheduleItem(item.StartDateTime, item.EndDateTime))
			{
				<span class="scheduleItem" style="grid-row-start: @ScheduleItemStartRow(item.StartDateTime); top: @ScheduleItemMinutesPosition(item.StartDateTime); height: @ScheduleItemRowHeight(item.StartDateTime, item.EndDateTime);">
					@item.Name  - @item.StartDateTime.ToShortTimeString()
				</span>
			}
		}

	</div>

@*
Today is <span>@SelectedDate</span>
*@

@functions {

	DateTime SelectedDate
	{
		get { return MyScheduleState.SelectedDate; }
	}

	Schedule MySchedule
	{
		get { return MyScheduleState.Schedule; }
	}

	DateTime DayViewStart
	{
		get { return MyScheduleState.SelectedDate.AddHours(8); }
	}

	DateTime DayViewEnd
	{
		get { return MyScheduleState.SelectedDate.AddHours(20); }
	}

	protected override void OnInit()
	{

		MyScheduleState.OnSelectedDateChanged += (o, args) =>
		{
			Invoke(StateHasChanged);
		};

		base.OnInit();
	}

	protected override void OnParametersSet()
	{
		this.StateHasChanged();
		base.OnParametersSet();
	}

	bool DisplayScheduleItem(DateTime start, DateTime end)
	{
		if (start >= DayViewEnd || end <= DayViewStart) { return false; }
		return true;
	}

	int ScheduleItemStartRow(DateTime start)
	{
		if (start.Hour <= DayViewStart.Hour)
		{
			return 1;
		}

		return (start.Hour - DayViewStart.Hour) + 1;
	}

	string ScheduleItemMinutesPosition(DateTime start)
	{
		double top = 0D;
		if (start > DayViewStart && start.Minute > 0)
		{
			top = 0.025 * start.Minute;
		}
		return (top > 0) ? $"{top}em" : "0";
	}

	string ScheduleItemRowHeight(DateTime start, DateTime end)
	{
		double height;
		double totalMinutes;

		if (end >= DayViewEnd)
		{
			end = DayViewEnd;
		}

		if (start < DayViewStart)
		{
			start = DayViewStart;
		}

		totalMinutes = end.Subtract(start).TotalMinutes;
		height = 0.063 * (end.Hour - start.Hour); // Adjust for row gaps
		height += 0.025 * totalMinutes;
		return (height > 0) ? $"{height}em" : "0;";
	}

}