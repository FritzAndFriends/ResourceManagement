@using Fritz.ResourceManagement.Domain

<div class="dayview@(ShowTimes ? "" : "_notimes")">
	@{
		var currentTime = DayViewStart;
		var hoursPerDay = DayViewEnd.Subtract(DayViewStart).Hours;

		for (var i = 0; i < hoursPerDay*2; i++)
		{
			if (ShowTimes && i % 2 == 0)
			{
				<span class="grid" style="grid-column: 1;">
					<text>@currentTime.ToString("h:mm tt")</text>
					@{ currentTime = currentTime.AddHours(1); }
				</span>
			}
			else if (i%2==1)
			{
				<span class="grid" style="grid-column: @(ShowTimes ? 2 : 1);"></span>
			}
		}
	}

	@if (MyScheduleState != null) {
		foreach (var item in MyScheduleState.TimeSlots.Where(s => s.StartDateTime.Date == SelectedDate.Date))
		{
			if (DisplayItem(item.StartDateTime, item.EndDateTime))
			{
				<span class="scheduleItem @ItemBorderStyle(item.StartDateTime, item.EndDateTime)" style="grid-row-start: @ItemStartRow(item.StartDateTime); top: @ItemTopPosition(item.StartDateTime); height: @ItemRowHeight(item.StartDateTime, item.EndDateTime);">
					@item.Name  - @item.StartDateTime.ToShortTimeString()
				</span>
			}
		}
	}

</div>

@*
Today is <span>@SelectedDate</span>
*@

@functions {

	DateTime SelectedDate
	{
		get { return MyScheduleState?.SelectedDate ?? DateTime.Today; }
	}

	Schedule MySchedule
	{
		get { return MyScheduleState.Schedule; }
	}

	// Cheer 701 themichaeljolley 09/07/19 
	// Cheer 600 cpayette 09/07/19 
	// Cheer 1500 clintonrocksmith 09/07/19 

	[Parameter]
	bool ShowTimes { get; set; } = true;

	[Parameter]
	Data.ScheduleState MyScheduleState { get; set; }

	[Parameter]
	DateTime DayViewStart { get; set; } = DateTime.Today.AddHours(8);

	[Parameter]
	DateTime DayViewEnd { get; set; } = DateTime.Today.AddHours(20);

	protected override void OnInit()
	{

		if (MyScheduleState != null)
		{
			MyScheduleState.OnSelectedDateChanged += (o, args) =>
			{
				Invoke(StateHasChanged);
			};
		}

		base.OnInit();
	}

	protected override void OnParametersSet()
	{
		this.StateHasChanged();
		base.OnParametersSet();
	}

	bool DisplayItem(DateTime start, DateTime end)
	{

		var startDayView = SelectedDate.Date.Add(DayViewStart.TimeOfDay);
		var endDayView = SelectedDate.Date.Add(DayViewEnd.TimeOfDay);

		if (start >= endDayView || end <= startDayView) { return false; }
		return true;
	}

	string ItemBorderStyle(DateTime start, DateTime end)
	{
		string top = "starts-before";
		string bottom = "ends-after";

		return String.Format("{0} {1}",
			(start < DayViewStart) ? top : "",
			(end > DayViewEnd) ? bottom : "");
	}

	int ItemStartRow(DateTime start)
	{
		if (start.Hour <= DayViewStart.Hour)
		{
			return 1;
		}

		return (start.Hour - DayViewStart.Hour) + 1;
	}

	string ItemTopPosition(DateTime start)
	{
		double top = 0D;

		if (start < DayViewStart)
		{
			return "-0.050em";
		}

		if (start > DayViewStart && start.Minute > 0)
		{
			top = 0.025 * start.Minute;
		}
		return (top > 0) ? $"{top}em" : "0";
	}

	string ItemRowHeight(DateTime start, DateTime end)
	{
		double height = 0D;
		double totalMinutes;

		TimeSpan startTime;
		TimeSpan endTime;
		if (start.TimeOfDay < DayViewStart.TimeOfDay)
		{
			startTime = DayViewStart.TimeOfDay;
		} else if (start.Date < SelectedDate)
		{
			startTime = DayViewStart.TimeOfDay;
		} else
		{
			startTime = start.TimeOfDay;
		}

		if (end.TimeOfDay >= DayViewEnd.TimeOfDay)
		{
			endTime = DayViewEnd.TimeOfDay;
		} else if (end.Date > SelectedDate)
		{
			endTime = DayViewEnd.TimeOfDay;
		} else
		{
			endTime = end.TimeOfDay;
		}

		if (start.TimeOfDay < DayViewStart.TimeOfDay)
		{
			height += 0.050; // Add 2 extra minutes for negative top position
		}


		totalMinutes = endTime.Subtract(startTime).TotalMinutes;
		height += 0.025 * totalMinutes; // 1 minute = 1.25em / 60 = 0.025em

		/* Adjust for row gaps, 1px = 0.063em at base 16px size 
		 * according to http://pxtoem.com/ */
		height += 0.063 * (endTime.Subtract(startTime).TotalHours);

		return (height > 0) ? $"{height}em" : "0;";
	}
}